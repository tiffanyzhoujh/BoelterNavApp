# -*- coding: utf-8 -*-
"""boelter.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m-cZt3tkk_bljZvFM279aLtj5a4XWO9d
"""

import json
import csv
import math
import heapq
import networkx as nx
from itertools import combinations

# Function to compute Euclidean distance
def euclidean_distance(coord1, coord2):
    return math.sqrt((coord1[0] - coord2[0])**2 + (coord1[1] - coord2[1])**2)

# Load coordinates from CSV
def load_coordinates(csv_files):
    coordinates = {}
    for csv_file in csv_files:
        with open(csv_file, newline='') as file:
            reader = csv.reader(file)
            next(reader)  # Skip header
            for row in reader:
                label, x, y = row
                coordinates[label] = (int(x), int(y))
    return coordinates

# Load edges from JSON
def load_edges(json_files):
    adjacency_list = {}
    for json_file in json_files:
        with open(json_file) as file:
            edges = json.load(file)
            for node, neighbors in edges.items():
                if node not in adjacency_list:
                    adjacency_list[node] = set()
                adjacency_list[node].update(map(str, neighbors))  # Ensure string keys
    return adjacency_list

# Build weighted graph
def build_weighted_graph(coords, adjacency_list, elevator_connections):
    G = nx.Graph()

    # Add edges with Euclidean distance as weight
    for node, neighbors in adjacency_list.items():
        for neighbor in neighbors:
            if neighbor in coords:  # Ensure valid coordinates exist
                weight = euclidean_distance(coords[node], coords[neighbor])
                G.add_edge(node, neighbor, weight=weight)

    # Add elevator connection with weight 0
    for elevator in elevator_connections:
        for floor_a, floor_b in combinations(elevator, 2):
            G.add_edge(floor_a, floor_b, weight=0.1)

    return G

# Compute shortest path using Dijkstra
def shortest_path(graph, start, end):
    return nx.shortest_path(graph, source=start, target=end, weight="weight"), nx.shortest_path_length(graph, source=start, target=end, weight="weight")

# File paths
coord_files = ["1f-coord.csv","2f-coord.csv","3f-coord.csv","4f-coord.csv","5f-coord.csv","6f-coord.csv","7f-coord.csv","8f-coord.csv","9f-coord.csv"]
edges_files = ["1f-edges.json","2f-edges.json","3f-edges.json","4f-edges.json","5f-edges.json","6f-edges.json","7f-edges.json","8f-edges.json","9f-edges.json"]

# Load data
coordinates = load_coordinates(coord_files)
edges = load_edges(edges_files)

# Add elevator connections
elevator_connections = [
    ["1f-11","2f-5","3f-15","4f-71","5f-42","6f-57","7f-60","8f-25"], # northwest, 500
    ["1f-22","2f-17","3f-23","4f-39","5f-58","6f-35","7f-38","8f-22"], # southwest, 700
    ["2f-36","3f-59","4f-5","5f-36","6f-2","7f-2","8f-3","9f-3"], # northeast, 200
    ["2f-50","3f-37","4f-27","5f-22","6f-21","7f-17","8f-15","9f-17"] # southeast, 401
]

# Build graph
G = build_weighted_graph(coordinates, edges, elevator_connections)

# Test
start, end = "1f-14", "9f-32"
path, distance = shortest_path(G, start, end)
print(f"Shortest Path: {path}")
print(f"Shortest Distance: {distance}")

